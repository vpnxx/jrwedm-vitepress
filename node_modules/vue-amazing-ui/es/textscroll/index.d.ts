export type { Props, Item } from './TextScroll';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./TextScroll').Props> & Readonly<{
        onClick?: ((...args: any[]) => any) | undefined;
    }>, {
        start: () => void;
        stop: () => void;
        reset: () => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        click: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        duration: number;
        width: number | string;
        height: number;
        ellipsis: boolean;
        vertical: boolean;
        single: boolean;
        gap: number;
        speed: number;
        pauseOnMouseEnter: boolean;
        interval: number;
        items: import('./TextScroll').Item[] | import('./TextScroll').Item;
        ellipsisProps: object;
        itemStyle: import('vue').CSSProperties;
        hrefHoverColor: string;
        amount: number | false;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        horizontalRef: HTMLDivElement;
        groupRef: HTMLDivElement;
        verticalRef: HTMLDivElement;
    }, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./TextScroll').Props> & Readonly<{
        onClick?: ((...args: any[]) => any) | undefined;
    }>, {
        start: () => void;
        stop: () => void;
        reset: () => void;
    }, {}, {}, {}, {
        duration: number;
        width: number | string;
        height: number;
        ellipsis: boolean;
        vertical: boolean;
        single: boolean;
        gap: number;
        speed: number;
        pauseOnMouseEnter: boolean;
        interval: number;
        items: import('./TextScroll').Item[] | import('./TextScroll').Item;
        ellipsisProps: object;
        itemStyle: import('vue').CSSProperties;
        hrefHoverColor: string;
        amount: number | false;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./TextScroll').Props> & Readonly<{
    onClick?: ((...args: any[]) => any) | undefined;
}>, {
    start: () => void;
    stop: () => void;
    reset: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    click: (...args: any[]) => void;
}, string, {
    duration: number;
    width: number | string;
    height: number;
    ellipsis: boolean;
    vertical: boolean;
    single: boolean;
    gap: number;
    speed: number;
    pauseOnMouseEnter: boolean;
    interval: number;
    items: import('./TextScroll').Item[] | import('./TextScroll').Item;
    ellipsisProps: object;
    itemStyle: import('vue').CSSProperties;
    hrefHoverColor: string;
    amount: number | false;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export default _default;
