export type { Props, Option } from './Segmented';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Segmented').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        "update:value": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        size: "small" | "middle" | "large";
        disabled: boolean;
        value: string | number;
        block: boolean;
        options: string[] | number[] | import('./Segmented').Option[];
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        segmentedGroupRef: HTMLDivElement;
        segmentedItemRef: HTMLDivElement[];
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Segmented').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        size: "small" | "middle" | "large";
        disabled: boolean;
        value: string | number;
        block: boolean;
        options: string[] | number[] | import('./Segmented').Option[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Segmented').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:value": (...args: any[]) => void;
}, string, {
    size: "small" | "middle" | "large";
    disabled: boolean;
    value: string | number;
    block: boolean;
    options: string[] | number[] | import('./Segmented').Option[];
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        label?(_: {
            option: string | number | import('./Segmented').Option;
            label: string | number | undefined;
            index: number;
            payload: any;
        }): any;
    };
}) & import('vue').Plugin;
export default _default;
