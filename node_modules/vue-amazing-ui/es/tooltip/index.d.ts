export type { Props } from './Tooltip';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Tooltip').Props> & Readonly<{
        onAnimationend?: ((...args: any[]) => any) | undefined;
        "onUpdate:show"?: ((...args: any[]) => any) | undefined;
        onOpenChange?: ((...args: any[]) => any) | undefined;
    }>, {
        show: () => void;
        hide: () => void;
        observeScroll: () => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        animationend: (...args: any[]) => void;
        "update:show": (...args: any[]) => void;
        openChange: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        maxWidth: string | number;
        content: string;
        contentClass: string;
        contentStyle: import('vue').CSSProperties;
        tooltip: string;
        tooltipClass: string;
        tooltipStyle: import('vue').CSSProperties;
        bgColor: string;
        arrow: boolean;
        placement: "top" | "bottom" | "left" | "right";
        flip: boolean;
        trigger: "hover" | "click";
        keyboard: boolean;
        to: string | HTMLElement | false;
        transitionDuration: number;
        showDelay: number;
        hideDelay: number;
        show: boolean;
        showControl: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        tooltipRef: HTMLDivElement;
        tooltipCardRef: HTMLDivElement;
        tooltipContentRef: HTMLSpanElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Tooltip').Props> & Readonly<{
        onAnimationend?: ((...args: any[]) => any) | undefined;
        "onUpdate:show"?: ((...args: any[]) => any) | undefined;
        onOpenChange?: ((...args: any[]) => any) | undefined;
    }>, {
        show: () => void;
        hide: () => void;
        observeScroll: () => void;
    }, {}, {}, {}, {
        maxWidth: string | number;
        content: string;
        contentClass: string;
        contentStyle: import('vue').CSSProperties;
        tooltip: string;
        tooltipClass: string;
        tooltipStyle: import('vue').CSSProperties;
        bgColor: string;
        arrow: boolean;
        placement: "top" | "bottom" | "left" | "right";
        flip: boolean;
        trigger: "hover" | "click";
        keyboard: boolean;
        to: string | HTMLElement | false;
        transitionDuration: number;
        showDelay: number;
        hideDelay: number;
        show: boolean;
        showControl: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Tooltip').Props> & Readonly<{
    onAnimationend?: ((...args: any[]) => any) | undefined;
    "onUpdate:show"?: ((...args: any[]) => any) | undefined;
    onOpenChange?: ((...args: any[]) => any) | undefined;
}>, {
    show: () => void;
    hide: () => void;
    observeScroll: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    animationend: (...args: any[]) => void;
    "update:show": (...args: any[]) => void;
    openChange: (...args: any[]) => void;
}, string, {
    maxWidth: string | number;
    content: string;
    contentClass: string;
    contentStyle: import('vue').CSSProperties;
    tooltip: string;
    tooltipClass: string;
    tooltipStyle: import('vue').CSSProperties;
    bgColor: string;
    arrow: boolean;
    placement: "top" | "bottom" | "left" | "right";
    flip: boolean;
    trigger: "hover" | "click";
    keyboard: boolean;
    to: string | HTMLElement | false;
    transitionDuration: number;
    showDelay: number;
    hideDelay: number;
    show: boolean;
    showControl: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        tooltip?(_: {}): any;
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
