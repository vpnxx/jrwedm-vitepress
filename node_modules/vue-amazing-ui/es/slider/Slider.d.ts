import { VNode, CSSProperties } from 'vue';
export type Marks = {
    [markValue: number]: string | VNode | (() => VNode) | {
        style: CSSProperties;
        label: string | VNode | (() => VNode);
    };
};
export interface Props {
    width?: string | number;
    height?: string | number;
    vertical?: boolean;
    min?: number;
    max?: number;
    marks?: Marks;
    disabled?: boolean;
    range?: boolean;
    step?: number | 'mark';
    tooltip?: boolean;
    tooltipOpen?: boolean;
    tooltipStyle?: CSSProperties;
    formatTooltip?: (value: number) => string | number;
    value?: number | number[];
}
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        mark?(_: {
            label: string | VNode<import('vue').RendererNode, import('vue').RendererElement, {
                [key: string]: any;
            }> | null;
            value: number;
        }): any;
    };
    refs: {
        sliderRef: HTMLDivElement;
        lowHandleRef: HTMLDivElement;
        lowTooltipRef: HTMLDivElement;
        highHandleRef: HTMLDivElement;
        highTooltipRef: HTMLDivElement;
    };
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<Props, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:value": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
}>, {
    width: string | number;
    height: string | number;
    tooltip: boolean;
    tooltipStyle: CSSProperties;
    disabled: boolean;
    value: number | number[];
    max: number;
    vertical: boolean;
    range: boolean;
    min: number;
    step: number | "mark";
    marks: Marks;
    tooltipOpen: boolean;
    formatTooltip: (value: number) => string | number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    sliderRef: HTMLDivElement;
    lowHandleRef: HTMLDivElement;
    lowTooltipRef: HTMLDivElement;
    highHandleRef: HTMLDivElement;
    highTooltipRef: HTMLDivElement;
}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
