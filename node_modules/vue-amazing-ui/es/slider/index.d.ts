export type { Props } from './Slider';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Slider').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        "update:value": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        tooltip: boolean;
        tooltipStyle: import('vue').CSSProperties;
        disabled: boolean;
        value: number | number[];
        max: number;
        vertical: boolean;
        range: boolean;
        min: number;
        step: number | "mark";
        marks: import('./Slider').Marks;
        tooltipOpen: boolean;
        formatTooltip: (value: number) => string | number;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        sliderRef: HTMLDivElement;
        lowHandleRef: HTMLDivElement;
        lowTooltipRef: HTMLDivElement;
        highHandleRef: HTMLDivElement;
        highTooltipRef: HTMLDivElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Slider').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        tooltip: boolean;
        tooltipStyle: import('vue').CSSProperties;
        disabled: boolean;
        value: number | number[];
        max: number;
        vertical: boolean;
        range: boolean;
        min: number;
        step: number | "mark";
        marks: import('./Slider').Marks;
        tooltipOpen: boolean;
        formatTooltip: (value: number) => string | number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Slider').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:value": (...args: any[]) => void;
}, string, {
    width: string | number;
    height: string | number;
    tooltip: boolean;
    tooltipStyle: import('vue').CSSProperties;
    disabled: boolean;
    value: number | number[];
    max: number;
    vertical: boolean;
    range: boolean;
    min: number;
    step: number | "mark";
    marks: import('./Slider').Marks;
    tooltipOpen: boolean;
    formatTooltip: (value: number) => string | number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        mark?(_: {
            label: string | import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
                [key: string]: any;
            }> | null;
            value: number;
        }): any;
    };
}) & import('vue').Plugin;
export default _default;
