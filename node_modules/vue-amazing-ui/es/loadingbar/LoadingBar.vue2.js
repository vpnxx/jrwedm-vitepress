import { defineComponent as $, ref as o, computed as m, watch as k, createBlock as E, openBlock as h, Teleport as N, createVNode as z, Transition as F, withCtx as x, withDirectives as D, createCommentVNode as T, createElementBlock as V, normalizeStyle as A, normalizeClass as R, createElementVNode as j, vShow as I, nextTick as u } from "vue";
import { useInject as P } from "../utils/index.js";
const G = /* @__PURE__ */ $({
  __name: "LoadingBar",
  props: {
    containerClass: { default: void 0 },
    containerStyle: { default: () => ({}) },
    loadingBarSize: { default: 2 },
    colorLoading: { default: void 0 },
    colorFinish: { default: void 0 },
    colorError: { default: "#ff4d4f" },
    to: { type: [String, Boolean], default: "body" }
  },
  setup(p, { expose: y }) {
    const r = p, n = o(!1), l = o(!1), e = o(), s = o(!1), d = o(!1), t = o(!1), i = o(!1), { colorPalettes: f } = P("LoadingBar"), b = m(() => r.colorLoading === void 0 ? f.value[5] : r.colorLoading), w = m(() => r.colorFinish === void 0 ? f.value[5] : r.colorFinish);
    k(
      l,
      (a) => {
        a && !n.value && (n.value = !0);
      },
      {
        immediate: !0
      }
    );
    async function v() {
      l.value = !1, t.value = !1, i.value = !1, s.value = !0, await u(), s.value = !1;
    }
    async function c(a = 0, g = 80, W = "starting") {
      d.value = !0, await v(), !t.value && (l.value = !0, await u(), e.value && (e.value.style.transition = "none", e.value.style.maxWidth = `${a}%`, e.value.offsetWidth, e.value.className = `loading-bar loading-bar-${W}`, e.value.style.transition = "", e.value.style.maxWidth = `${g}%`));
    }
    async function B() {
      t.value || i.value || (d.value && await u(), t.value = !0, e.value && (e.value.className = "loading-bar loading-bar-finishing", e.value.style.maxWidth = "100%", e.value.offsetWidth, l.value = !1));
    }
    function C() {
      if (!(t.value || i.value))
        if (!l.value)
          c(100, 100, "error").then(() => {
            i.value = !0;
          });
        else {
          if (i.value = !0, !e.value)
            return;
          e.value.className = "loading-bar loading-bar-error", e.value.style.maxWidth = "100%", e.value.offsetWidth, l.value = !1;
        }
    }
    function L() {
      i.value && (l.value = !1);
    }
    async function S() {
      await v();
    }
    return y({
      start: c,
      finish: B,
      error: C
    }), (a, g) => (h(), E(N, {
      disabled: a.to === !1,
      to: a.to === !1 ? null : a.to
    }, [
      z(F, {
        name: "fade-in",
        appear: "",
        onAfterEnter: L,
        onAfterLeave: S,
        css: !s.value
      }, {
        default: x(() => [
          n.value ? D((h(), V("div", {
            key: 0,
            class: R(["loading-bar-wrap", a.containerClass]),
            style: A([
              `
            --loading-bar-size: ${a.loadingBarSize}px;
            --loading-bar-color-loading: ${b.value};
            --loading-bar-color-finish: ${w.value};
            --loading-bar-color-error: ${a.colorError};
          `,
              a.containerStyle
            ])
          }, [
            j("div", {
              ref_key: "loadingBarRef",
              ref: e,
              class: "loading-bar",
              style: { "max-width": "100%" }
            }, null, 512)
          ], 6)), [
            [I, l.value]
          ]) : T("", !0)
        ]),
        _: 1
      }, 8, ["css"])
    ], 8, ["disabled", "to"]));
  }
});
export {
  G as default
};
