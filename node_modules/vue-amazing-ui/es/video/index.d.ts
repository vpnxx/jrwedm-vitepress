export type { Props } from './Video';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Video').Props> & Readonly<{
        onPause?: ((...args: any[]) => any) | undefined;
        onPlay?: ((...args: any[]) => any) | undefined;
    }>, {
        play: () => void;
        pause: () => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        pause: (...args: any[]) => void;
        play: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        src: string;
        width: string | number;
        height: string | number;
        autoplay: boolean;
        fit: "none" | "fill" | "contain" | "cover";
        loop: boolean;
        iconSize: number;
        poster: string;
        second: number;
        controls: boolean;
        muted: boolean;
        preload: "auto" | "metadata" | "none";
        playIcon: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        veoRef: HTMLVideoElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Video').Props> & Readonly<{
        onPause?: ((...args: any[]) => any) | undefined;
        onPlay?: ((...args: any[]) => any) | undefined;
    }>, {
        play: () => void;
        pause: () => void;
    }, {}, {}, {}, {
        src: string;
        width: string | number;
        height: string | number;
        autoplay: boolean;
        fit: "none" | "fill" | "contain" | "cover";
        loop: boolean;
        iconSize: number;
        poster: string;
        second: number;
        controls: boolean;
        muted: boolean;
        preload: "auto" | "metadata" | "none";
        playIcon: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Video').Props> & Readonly<{
    onPause?: ((...args: any[]) => any) | undefined;
    onPlay?: ((...args: any[]) => any) | undefined;
}>, {
    play: () => void;
    pause: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    pause: (...args: any[]) => void;
    play: (...args: any[]) => void;
}, string, {
    src: string;
    width: string | number;
    height: string | number;
    autoplay: boolean;
    fit: "none" | "fill" | "contain" | "cover";
    loop: boolean;
    iconSize: number;
    poster: string;
    second: number;
    controls: boolean;
    muted: boolean;
    preload: "auto" | "metadata" | "none";
    playIcon: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export default _default;
