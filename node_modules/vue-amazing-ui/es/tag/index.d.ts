export type { Props, Item } from './Tag';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Tag').Props> & Readonly<{
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
        onDynamicClose?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        close: (...args: any[]) => void;
        "update:value": (...args: any[]) => void;
        dynamicClose: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        size: "small" | "middle" | "large";
        bordered: boolean;
        closable: boolean;
        icon: string;
        color: string;
        value: string[] | import('./Tag').Item[];
        dynamic: boolean;
        spaceProps: object;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        tagsIconRef: HTMLSpanElement;
        inputRef: HTMLInputElement;
    }, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Tag').Props> & Readonly<{
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
        onDynamicClose?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        size: "small" | "middle" | "large";
        bordered: boolean;
        closable: boolean;
        icon: string;
        color: string;
        value: string[] | import('./Tag').Item[];
        dynamic: boolean;
        spaceProps: object;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Tag').Props> & Readonly<{
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    onDynamicClose?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    close: (...args: any[]) => void;
    "update:value": (...args: any[]) => void;
    dynamicClose: (...args: any[]) => void;
}, string, {
    size: "small" | "middle" | "large";
    bordered: boolean;
    closable: boolean;
    icon: string;
    color: string;
    value: string[] | import('./Tag').Item[];
    dynamic: boolean;
    spaceProps: object;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        icon?(_: {}): any;
        icon?(_: {
            item: any;
            icon: string;
            index: number;
        }): any;
        default?(_: {}): any;
        label?(_: {
            item: any;
            label: any;
            index: number;
        }): any;
    };
}) & import('vue').Plugin;
export default _default;
