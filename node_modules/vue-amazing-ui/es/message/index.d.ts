export type { Props, Message } from './Message';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Message').Props> & Readonly<{
        onClick?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
    }>, {
        open: (message: string | import('./Message').Message) => void;
        info: (message: string | import('./Message').Message) => void;
        success: (message: string | import('./Message').Message) => void;
        error: (message: string | import('./Message').Message) => void;
        warning: (message: string | import('./Message').Message) => void;
        loading: (message: string | import('./Message').Message) => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        click: (...args: any[]) => void;
        close: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        duration: number;
        top: string | number;
        content: string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Message').Props> & Readonly<{
        onClick?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
    }>, {
        open: (message: string | import('./Message').Message) => void;
        info: (message: string | import('./Message').Message) => void;
        success: (message: string | import('./Message').Message) => void;
        error: (message: string | import('./Message').Message) => void;
        warning: (message: string | import('./Message').Message) => void;
        loading: (message: string | import('./Message').Message) => void;
    }, {}, {}, {}, {
        duration: number;
        top: string | number;
        content: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Message').Props> & Readonly<{
    onClick?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
}>, {
    open: (message: string | import('./Message').Message) => void;
    info: (message: string | import('./Message').Message) => void;
    success: (message: string | import('./Message').Message) => void;
    error: (message: string | import('./Message').Message) => void;
    warning: (message: string | import('./Message').Message) => void;
    loading: (message: string | import('./Message').Message) => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    click: (...args: any[]) => void;
    close: (...args: any[]) => void;
}, string, {
    duration: number;
    top: string | number;
    content: string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export default _default;
