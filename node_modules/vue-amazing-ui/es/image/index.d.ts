export type { Props, Image } from './Image';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Image').Props> & Readonly<{}>, {
        preview: (index: number) => Promise<void>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        name: string;
        bordered: boolean;
        src: string | import('./Image').Image[];
        width: string | number | (string | number)[];
        height: string | number | (string | number)[];
        disabled: boolean;
        spinProps: object;
        fit: "contain" | "fill" | "cover" | "none" | "scale-down";
        preview: string;
        previewImageStyle: import('vue').CSSProperties;
        spaceProps: object;
        previewSpinProps: object;
        zoomRatio: number;
        minZoomScale: number;
        maxZoomScale: number;
        resetOnDbclick: boolean;
        draggable: boolean;
        loop: boolean;
        album: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        imagesRef: HTMLImageElement;
        previewRef: HTMLDivElement;
        previewImagesRef: HTMLImageElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Image').Props> & Readonly<{}>, {
        preview: (index: number) => Promise<void>;
    }, {}, {}, {}, {
        name: string;
        bordered: boolean;
        src: string | import('./Image').Image[];
        width: string | number | (string | number)[];
        height: string | number | (string | number)[];
        disabled: boolean;
        spinProps: object;
        fit: "contain" | "fill" | "cover" | "none" | "scale-down";
        preview: string;
        previewImageStyle: import('vue').CSSProperties;
        spaceProps: object;
        previewSpinProps: object;
        zoomRatio: number;
        minZoomScale: number;
        maxZoomScale: number;
        resetOnDbclick: boolean;
        draggable: boolean;
        loop: boolean;
        album: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Image').Props> & Readonly<{}>, {
    preview: (index: number) => Promise<void>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    name: string;
    bordered: boolean;
    src: string | import('./Image').Image[];
    width: string | number | (string | number)[];
    height: string | number | (string | number)[];
    disabled: boolean;
    spinProps: object;
    fit: "contain" | "fill" | "cover" | "none" | "scale-down";
    preview: string;
    previewImageStyle: import('vue').CSSProperties;
    spaceProps: object;
    previewSpinProps: object;
    zoomRatio: number;
    minZoomScale: number;
    maxZoomScale: number;
    resetOnDbclick: boolean;
    draggable: boolean;
    loop: boolean;
    album: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        preview?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
