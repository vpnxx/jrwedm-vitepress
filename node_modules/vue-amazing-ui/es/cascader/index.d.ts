export type { Props, Option } from './Cascader';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Cascader').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        filter: Function | true;
        size: "small" | "middle" | "large";
        label: string;
        search: boolean;
        children: string;
        placeholder: string | string[];
        width: "auto" | number | number[];
        height: number;
        disabled: boolean | boolean[];
        value: string;
        gap: number;
        options: import('./Cascader').Option[];
        allowClear: boolean;
        maxDisplay: number;
        modelValue: number[] | string[];
        changeOnSelect: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Cascader').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        filter: Function | true;
        size: "small" | "middle" | "large";
        label: string;
        search: boolean;
        children: string;
        placeholder: string | string[];
        width: "auto" | number | number[];
        height: number;
        disabled: boolean | boolean[];
        value: string;
        gap: number;
        options: import('./Cascader').Option[];
        allowClear: boolean;
        maxDisplay: number;
        modelValue: number[] | string[];
        changeOnSelect: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Cascader').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
}, string, {
    filter: Function | true;
    size: "small" | "middle" | "large";
    label: string;
    search: boolean;
    children: string;
    placeholder: string | string[];
    width: "auto" | number | number[];
    height: number;
    disabled: boolean | boolean[];
    value: string;
    gap: number;
    options: import('./Cascader').Option[];
    allowClear: boolean;
    maxDisplay: number;
    modelValue: number[] | string[];
    changeOnSelect: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export default _default;
