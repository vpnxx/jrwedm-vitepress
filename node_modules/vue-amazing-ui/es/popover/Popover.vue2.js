import { defineComponent as m, computed as i, createBlock as v, openBlock as e, unref as S, withCtx as a, renderSlot as o, createElementBlock as s, createCommentVNode as d, normalizeStyle as u, normalizeClass as k, createTextVNode as p, toDisplayString as c } from "vue";
import b from "../tooltip/index.js";
import { useSlotsExist as h } from "../utils/index.js";
const E = /* @__PURE__ */ m({
  __name: "Popover",
  props: {
    title: { default: void 0 },
    titleStyle: { default: () => ({}) },
    content: { default: void 0 },
    contentStyle: { default: () => ({}) },
    keyboard: { type: Boolean, default: !0 },
    tooltipStyle: { default: () => ({}) }
  },
  setup(y) {
    const l = y, n = h(["title", "content"]), f = i(() => n.title || l.title), r = i(() => n.content || l.content);
    return (t, C) => (e(), v(S(b), {
      "max-width": "auto",
      "bg-color": "#fff",
      "tooltip-style": {
        padding: "12px",
        borderRadius: "8px",
        textAlign: "start",
        ...t.tooltipStyle
      },
      keyboard: t.keyboard,
      "transition-duration": 200
    }, {
      tooltip: a(() => [
        f.value ? (e(), s("div", {
          key: 0,
          class: k(["popover-title", { mb8: r.value }]),
          style: u(t.titleStyle)
        }, [
          o(t.$slots, "title", {}, () => [
            p(c(t.title), 1)
          ], !0)
        ], 6)) : d("", !0),
        r.value ? (e(), s("div", {
          key: 1,
          class: "popover-content",
          style: u(t.contentStyle)
        }, [
          o(t.$slots, "content", {}, () => [
            p(c(t.content), 1)
          ], !0)
        ], 4)) : d("", !0)
      ]),
      default: a(() => [
        o(t.$slots, "default", {}, void 0, !0)
      ]),
      _: 3
    }, 8, ["tooltip-style", "keyboard"]));
  }
});
export {
  E as default
};
