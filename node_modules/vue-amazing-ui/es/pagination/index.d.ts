export type { Props } from './Pagination';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Pagination').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:page"?: ((...args: any[]) => any) | undefined;
        "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        "update:page": (...args: any[]) => void;
        "update:pageSize": (...args: any[]) => void;
        pageSizeChange: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        size: "large" | "middle" | "small";
        placement: "left" | "center" | "right";
        disabled: boolean;
        page: number;
        pageSize: number;
        total: number;
        pageAmount: number;
        hideOnSinglePage: boolean;
        showQuickJumper: boolean;
        jumperProps: object;
        showSizeChanger: boolean;
        changerProps: object;
        pageSizeOptions: string[] | number[];
        showTotal: boolean | ((total: number, range: number[]) => string);
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        forward: HTMLSpanElement;
        pageListRef: HTMLSpanElement[];
        backward: HTMLSpanElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Pagination').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:page"?: ((...args: any[]) => any) | undefined;
        "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        size: "large" | "middle" | "small";
        placement: "left" | "center" | "right";
        disabled: boolean;
        page: number;
        pageSize: number;
        total: number;
        pageAmount: number;
        hideOnSinglePage: boolean;
        showQuickJumper: boolean;
        jumperProps: object;
        showSizeChanger: boolean;
        changerProps: object;
        pageSizeOptions: string[] | number[];
        showTotal: boolean | ((total: number, range: number[]) => string);
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Pagination').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:page"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
    onPageSizeChange?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:page": (...args: any[]) => void;
    "update:pageSize": (...args: any[]) => void;
    pageSizeChange: (...args: any[]) => void;
}, string, {
    size: "large" | "middle" | "small";
    placement: "left" | "center" | "right";
    disabled: boolean;
    page: number;
    pageSize: number;
    total: number;
    pageAmount: number;
    hideOnSinglePage: boolean;
    showQuickJumper: boolean;
    jumperProps: object;
    showSizeChanger: boolean;
    changerProps: object;
    pageSizeOptions: string[] | number[];
    showTotal: boolean | ((total: number, range: number[]) => string);
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export default _default;
