export type { Props } from './Rate';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Rate').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
        onHoverChange?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        "update:value": (...args: any[]) => void;
        hoverChange: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        size: number;
        color: string;
        disabled: boolean;
        tooltipProps: object;
        value: number;
        gap: number;
        allowClear: boolean;
        count: number;
        allowHalf: boolean;
        character: "star-outlined" | "star-filled" | "heart-outlined" | "heart-filled" | string;
        tooltips: string[];
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Rate').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
        onHoverChange?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        size: number;
        color: string;
        disabled: boolean;
        tooltipProps: object;
        value: number;
        gap: number;
        allowClear: boolean;
        count: number;
        allowHalf: boolean;
        character: "star-outlined" | "star-filled" | "heart-outlined" | "heart-filled" | string;
        tooltips: string[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Rate').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    onHoverChange?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:value": (...args: any[]) => void;
    hoverChange: (...args: any[]) => void;
}, string, {
    size: number;
    color: string;
    disabled: boolean;
    tooltipProps: object;
    value: number;
    gap: number;
    allowClear: boolean;
    count: number;
    allowHalf: boolean;
    character: "star-outlined" | "star-filled" | "heart-outlined" | "heart-filled" | string;
    tooltips: string[];
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        tooltip?(_: {
            tooltip: string;
            value: number;
        }): any;
        character?(_: {
            value: number;
        }): any;
        character?(_: {
            value: number;
        }): any;
    };
}) & import('vue').Plugin;
export default _default;
