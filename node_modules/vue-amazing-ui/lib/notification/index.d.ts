export type { Props, Notification } from './Notification';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Notification').Props> & Readonly<{
        onClose?: ((...args: any[]) => any) | undefined;
    }>, {
        open: (notification: import('./Notification').Notification) => void;
        info: (notification: import('./Notification').Notification) => void;
        success: (notification: import('./Notification').Notification) => void;
        error: (notification: import('./Notification').Notification) => void;
        warning: (notification: import('./Notification').Notification) => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        close: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        title: string;
        description: string;
        duration: number | null;
        top: number;
        bottom: number;
        placement: "topLeft" | "topRight" | "bottomLeft" | "bottomRight";
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        notificationRef: HTMLDivElement[];
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Notification').Props> & Readonly<{
        onClose?: ((...args: any[]) => any) | undefined;
    }>, {
        open: (notification: import('./Notification').Notification) => void;
        info: (notification: import('./Notification').Notification) => void;
        success: (notification: import('./Notification').Notification) => void;
        error: (notification: import('./Notification').Notification) => void;
        warning: (notification: import('./Notification').Notification) => void;
    }, {}, {}, {}, {
        title: string;
        description: string;
        duration: number | null;
        top: number;
        bottom: number;
        placement: "topLeft" | "topRight" | "bottomLeft" | "bottomRight";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Notification').Props> & Readonly<{
    onClose?: ((...args: any[]) => any) | undefined;
}>, {
    open: (notification: import('./Notification').Notification) => void;
    info: (notification: import('./Notification').Notification) => void;
    success: (notification: import('./Notification').Notification) => void;
    error: (notification: import('./Notification').Notification) => void;
    warning: (notification: import('./Notification').Notification) => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    close: (...args: any[]) => void;
}, string, {
    title: string;
    description: string;
    duration: number | null;
    top: number;
    bottom: number;
    placement: "topLeft" | "topRight" | "bottomLeft" | "bottomRight";
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export default _default;
