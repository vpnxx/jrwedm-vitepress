export type { Props } from './InputSearch';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./InputSearch').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        onCompositionend?: ((...args: any[]) => any) | undefined;
        onCompositionstart?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        compositionend: (...args: any[]) => void;
        compositionstart: (...args: any[]) => void;
        search: (...args: any[]) => void;
        "update:value": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        size: "small" | "middle" | "large";
        search: string;
        icon: boolean;
        placeholder: string;
        width: string | number;
        disabled: boolean;
        value: string;
        loading: boolean;
        allowClear: boolean;
        addonBefore: string;
        prefix: string;
        suffix: string;
        maxlength: number;
        showCount: boolean;
        valueModifiers: object;
        searchProps: object;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        inputRef: HTMLInputElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./InputSearch').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        onCompositionend?: ((...args: any[]) => any) | undefined;
        onCompositionstart?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        size: "small" | "middle" | "large";
        search: string;
        icon: boolean;
        placeholder: string;
        width: string | number;
        disabled: boolean;
        value: string;
        loading: boolean;
        allowClear: boolean;
        addonBefore: string;
        prefix: string;
        suffix: string;
        maxlength: number;
        showCount: boolean;
        valueModifiers: object;
        searchProps: object;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./InputSearch').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    onCompositionend?: ((...args: any[]) => any) | undefined;
    onCompositionstart?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    compositionend: (...args: any[]) => void;
    compositionstart: (...args: any[]) => void;
    search: (...args: any[]) => void;
    "update:value": (...args: any[]) => void;
}, string, {
    size: "small" | "middle" | "large";
    search: string;
    icon: boolean;
    placeholder: string;
    width: string | number;
    disabled: boolean;
    value: string;
    loading: boolean;
    allowClear: boolean;
    addonBefore: string;
    prefix: string;
    suffix: string;
    maxlength: number;
    showCount: boolean;
    valueModifiers: object;
    searchProps: object;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        addonBefore?(_: {}): any;
        prefix?(_: {}): any;
        suffix?(_: {}): any;
        search?(_: {}): any;
        icon?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
