export type { Props } from './Drawer';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Drawer').Props> & Readonly<{
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:open"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        close: (...args: any[]) => void;
        "update:open": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        footer: string;
        title: string;
        closable: boolean;
        width: string | number;
        height: string | number;
        placement: "top" | "right" | "bottom" | "left";
        zIndex: number;
        open: boolean;
        scrollbarProps: object;
        extra: string;
        bodyStyle: import('vue').CSSProperties;
        headerStyle: import('vue').CSSProperties;
        bodyClass: string;
        destroyOnClose: boolean;
        headerClass: string;
        footerClass: string;
        footerStyle: import('vue').CSSProperties;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        drawerRef: HTMLDivElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Drawer').Props> & Readonly<{
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:open"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        footer: string;
        title: string;
        closable: boolean;
        width: string | number;
        height: string | number;
        placement: "top" | "right" | "bottom" | "left";
        zIndex: number;
        open: boolean;
        scrollbarProps: object;
        extra: string;
        bodyStyle: import('vue').CSSProperties;
        headerStyle: import('vue').CSSProperties;
        bodyClass: string;
        destroyOnClose: boolean;
        headerClass: string;
        footerClass: string;
        footerStyle: import('vue').CSSProperties;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Drawer').Props> & Readonly<{
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:open"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    close: (...args: any[]) => void;
    "update:open": (...args: any[]) => void;
}, string, {
    footer: string;
    title: string;
    closable: boolean;
    width: string | number;
    height: string | number;
    placement: "top" | "right" | "bottom" | "left";
    zIndex: number;
    open: boolean;
    scrollbarProps: object;
    extra: string;
    bodyStyle: import('vue').CSSProperties;
    headerStyle: import('vue').CSSProperties;
    bodyClass: string;
    destroyOnClose: boolean;
    headerClass: string;
    footerClass: string;
    footerStyle: import('vue').CSSProperties;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        title?(_: {}): any;
        title?(_: {}): any;
        extra?(_: {}): any;
        extra?(_: {}): any;
        default?(_: {}): any;
        default?(_: {}): any;
        footer?(_: {}): any;
        footer?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
