export type { Props } from './LoadingBar';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./LoadingBar').Props> & Readonly<{}>, {
        start: (from?: number, to?: number, status?: "starting" | "error") => Promise<void>;
        finish: () => Promise<void>;
        error: () => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        to: string | HTMLElement | false;
        containerClass: string;
        containerStyle: import('vue').CSSProperties;
        loadingBarSize: number;
        colorLoading: string;
        colorFinish: string;
        colorError: string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        loadingBarRef: HTMLDivElement;
    }, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./LoadingBar').Props> & Readonly<{}>, {
        start: (from?: number, to?: number, status?: "starting" | "error") => Promise<void>;
        finish: () => Promise<void>;
        error: () => void;
    }, {}, {}, {}, {
        to: string | HTMLElement | false;
        containerClass: string;
        containerStyle: import('vue').CSSProperties;
        loadingBarSize: number;
        colorLoading: string;
        colorFinish: string;
        colorError: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./LoadingBar').Props> & Readonly<{}>, {
    start: (from?: number, to?: number, status?: "starting" | "error") => Promise<void>;
    finish: () => Promise<void>;
    error: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    to: string | HTMLElement | false;
    containerClass: string;
    containerStyle: import('vue').CSSProperties;
    loadingBarSize: number;
    colorLoading: string;
    colorFinish: string;
    colorError: string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export default _default;
