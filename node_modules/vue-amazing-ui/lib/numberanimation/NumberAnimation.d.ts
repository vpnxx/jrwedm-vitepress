import { CSSProperties } from 'vue';
export type TransitionFunc = 'linear' | 'easeOutSine' | 'easeInOutSine' | 'easeInQuad' | 'easeOutQuad' | 'easeInOutQuad' | 'easeInCubic' | 'easeOutCubic' | 'easeInOutCubic' | 'easeInQuart' | 'easeOutQuart' | 'easeInOutQuart' | 'easeInQuint' | 'easeOutQuint' | 'easeInOutQuint' | 'easeInExpo' | 'easeOutExpo' | 'easeInOutExpo' | 'easeInCirc' | 'easeOutCirc' | 'easeInOutCirc' | 'easeInBack' | 'easeOutBack' | 'easeInOutBack';
export interface Props {
    from?: number;
    to?: number;
    duration?: number;
    autoplay?: boolean;
    precision?: number;
    prefix?: string;
    suffix?: string;
    separator?: string;
    decimal?: string;
    valueStyle?: CSSProperties;
    transition?: TransitionFunc;
}
declare function play(): void;
declare const _default: import('vue').DefineComponent<Props, {
    play: typeof play;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    started: (...args: any[]) => void;
    finished: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<Props> & Readonly<{
    onStarted?: ((...args: any[]) => any) | undefined;
    onFinished?: ((...args: any[]) => any) | undefined;
}>, {
    duration: number;
    transition: TransitionFunc;
    to: number;
    valueStyle: CSSProperties;
    separator: string;
    autoplay: boolean;
    prefix: string;
    suffix: string;
    precision: number;
    from: number;
    decimal: string;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLSpanElement>;
export default _default;
