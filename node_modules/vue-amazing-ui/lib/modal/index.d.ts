export type { Props, Modal } from './Modal';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Modal').Props> & Readonly<{
        onCancel?: ((...args: any[]) => any) | undefined;
        "onUpdate:open"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        onKnow?: ((...args: any[]) => any) | undefined;
    }>, {
        info: (data: import('./Modal').Modal) => void;
        success: (data: import('./Modal').Modal) => void;
        error: (data: import('./Modal').Modal) => void;
        warning: (data: import('./Modal').Modal) => void;
        confirm: (data: import('./Modal').Modal) => void;
        erase: (data: import('./Modal').Modal) => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        cancel: (...args: any[]) => void;
        "update:open": (...args: any[]) => void;
        ok: (...args: any[]) => void;
        know: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        title: string;
        icon: import('vue').VNode | import('vue').Slot;
        width: string | number;
        top: string | number;
        content: string;
        contentStyle: import('vue').CSSProperties;
        keyboard: boolean;
        transformOrigin: "mouse" | "center";
        bodyStyle: import('vue').CSSProperties;
        titleStyle: import('vue').CSSProperties;
        cancelText: string;
        bodyClass: string;
        cancelProps: object;
        okText: string;
        okType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
        okProps: object;
        destroyOnClose: boolean;
        centered: boolean;
        confirmLoading: boolean;
        blockScroll: boolean;
        maskClosable: boolean;
        maskStyle: import('vue').CSSProperties;
        noticeText: string;
        noticeProps: object;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        modalWrapRef: HTMLDivElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Modal').Props> & Readonly<{
        onCancel?: ((...args: any[]) => any) | undefined;
        "onUpdate:open"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        onKnow?: ((...args: any[]) => any) | undefined;
    }>, {
        info: (data: import('./Modal').Modal) => void;
        success: (data: import('./Modal').Modal) => void;
        error: (data: import('./Modal').Modal) => void;
        warning: (data: import('./Modal').Modal) => void;
        confirm: (data: import('./Modal').Modal) => void;
        erase: (data: import('./Modal').Modal) => void;
    }, {}, {}, {}, {
        title: string;
        icon: import('vue').VNode | import('vue').Slot;
        width: string | number;
        top: string | number;
        content: string;
        contentStyle: import('vue').CSSProperties;
        keyboard: boolean;
        transformOrigin: "mouse" | "center";
        bodyStyle: import('vue').CSSProperties;
        titleStyle: import('vue').CSSProperties;
        cancelText: string;
        bodyClass: string;
        cancelProps: object;
        okText: string;
        okType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
        okProps: object;
        destroyOnClose: boolean;
        centered: boolean;
        confirmLoading: boolean;
        blockScroll: boolean;
        maskClosable: boolean;
        maskStyle: import('vue').CSSProperties;
        noticeText: string;
        noticeProps: object;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Modal').Props> & Readonly<{
    onCancel?: ((...args: any[]) => any) | undefined;
    "onUpdate:open"?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    onKnow?: ((...args: any[]) => any) | undefined;
}>, {
    info: (data: import('./Modal').Modal) => void;
    success: (data: import('./Modal').Modal) => void;
    error: (data: import('./Modal').Modal) => void;
    warning: (data: import('./Modal').Modal) => void;
    confirm: (data: import('./Modal').Modal) => void;
    erase: (data: import('./Modal').Modal) => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    cancel: (...args: any[]) => void;
    "update:open": (...args: any[]) => void;
    ok: (...args: any[]) => void;
    know: (...args: any[]) => void;
}, string, {
    title: string;
    icon: import('vue').VNode | import('vue').Slot;
    width: string | number;
    top: string | number;
    content: string;
    contentStyle: import('vue').CSSProperties;
    keyboard: boolean;
    transformOrigin: "mouse" | "center";
    bodyStyle: import('vue').CSSProperties;
    titleStyle: import('vue').CSSProperties;
    cancelText: string;
    bodyClass: string;
    cancelProps: object;
    okText: string;
    okType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
    okProps: object;
    destroyOnClose: boolean;
    centered: boolean;
    confirmLoading: boolean;
    blockScroll: boolean;
    maskClosable: boolean;
    maskStyle: import('vue').CSSProperties;
    noticeText: string;
    noticeProps: object;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        icon?(_: {}): any;
        icon?(_: {}): any;
        title?(_: {}): any;
        title?(_: {}): any;
        default?(_: {}): any;
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
