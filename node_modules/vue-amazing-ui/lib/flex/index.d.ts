export type { Props } from './Flex';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Flex').Props> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        wrap: "nowrap" | "wrap" | "wrap-reverse";
        vertical: boolean;
        justify: string;
        gap: number | number[] | "small" | "middle" | "large";
        align: string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Flex').Props> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        wrap: "nowrap" | "wrap" | "wrap-reverse";
        vertical: boolean;
        justify: string;
        gap: number | number[] | "small" | "middle" | "large";
        align: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Flex').Props> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    wrap: "nowrap" | "wrap" | "wrap-reverse";
    vertical: boolean;
    justify: string;
    gap: number | number[] | "small" | "middle" | "large";
    align: string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
