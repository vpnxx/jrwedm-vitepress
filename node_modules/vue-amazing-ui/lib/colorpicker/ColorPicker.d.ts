import { CSSProperties } from 'vue';
export type ColorPickerMode = 'rgb' | 'hsl' | 'hsv' | 'hex';
export type ColorPickerAction = 'confirm' | 'clear';
export interface Props {
    width?: string | number;
    label?: (color: string) => string;
    tooltipStyle?: CSSProperties;
    inputProps?: object;
    showAlpha?: boolean;
    showPreview?: boolean;
    size?: 'small' | 'middle' | 'large';
    disabled?: boolean;
    value?: string;
    modes?: ColorPickerMode[];
    swatches?: string[];
    actions?: ColorPickerAction[];
    footer?: string;
}
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        footer?(_: {}): any;
        label?(_: {
            color: string;
        }): any;
    };
    refs: {
        tooltipRef: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly maxWidth?: string | number | undefined;
                readonly content?: string | undefined;
                readonly contentClass?: string | undefined;
                readonly contentStyle?: CSSProperties | undefined;
                readonly tooltip?: string | undefined;
                readonly tooltipClass?: string | undefined;
                readonly tooltipStyle?: CSSProperties | undefined;
                readonly bgColor?: string | undefined;
                readonly arrow?: boolean | undefined;
                readonly placement?: "top" | "bottom" | "left" | "right" | undefined;
                readonly flip?: boolean | undefined;
                readonly trigger?: "hover" | "click" | undefined;
                readonly keyboard?: boolean | undefined;
                readonly to?: (string | HTMLElement | false) | undefined;
                readonly transitionDuration?: number | undefined;
                readonly showDelay?: number | undefined;
                readonly hideDelay?: number | undefined;
                readonly show?: boolean | undefined;
                readonly showControl?: boolean | undefined;
                readonly onAnimationend?: ((...args: any[]) => any) | undefined;
                readonly "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                readonly onOpenChange?: ((...args: any[]) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                tooltipRef: HTMLDivElement;
                tooltipCardRef: HTMLDivElement;
                tooltipContentRef: HTMLSpanElement;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "animationend", ...args: any[]) => void) & ((event: "update:show", ...args: any[]) => void) & ((event: "openChange", ...args: any[]) => void);
            $el: HTMLDivElement;
            $options: import('vue').ComponentOptionsBase<Readonly<import('../tooltip').Props> & Readonly<{
                onAnimationend?: ((...args: any[]) => any) | undefined;
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                onOpenChange?: ((...args: any[]) => any) | undefined;
            }>, {
                show: () => void;
                hide: () => void;
                observeScroll: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                animationend: (...args: any[]) => void;
                "update:show": (...args: any[]) => void;
                openChange: (...args: any[]) => void;
            }, string, {
                maxWidth: string | number;
                content: string;
                contentClass: string;
                contentStyle: CSSProperties;
                tooltip: string;
                tooltipClass: string;
                tooltipStyle: CSSProperties;
                bgColor: string;
                arrow: boolean;
                placement: "top" | "bottom" | "left" | "right";
                flip: boolean;
                trigger: "hover" | "click";
                keyboard: boolean;
                to: string | HTMLElement | false;
                transitionDuration: number;
                showDelay: number;
                hideDelay: number;
                show: boolean;
                showControl: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            maxWidth: string | number;
            content: string;
            contentClass: string;
            contentStyle: CSSProperties;
            tooltip: string;
            tooltipClass: string;
            tooltipStyle: CSSProperties;
            bgColor: string;
            arrow: boolean;
            placement: "top" | "bottom" | "left" | "right";
            flip: boolean;
            trigger: "hover" | "click";
            keyboard: boolean;
            to: string | HTMLElement | false;
            transitionDuration: number;
            showDelay: number;
            hideDelay: number;
            show: boolean;
            showControl: boolean;
        }> & Omit<Readonly<import('../tooltip').Props> & Readonly<{
            onAnimationend?: ((...args: any[]) => any) | undefined;
            "onUpdate:show"?: ((...args: any[]) => any) | undefined;
            onOpenChange?: ((...args: any[]) => any) | undefined;
        }>, "hide" | "observeScroll" | ("maxWidth" | "content" | "contentClass" | "contentStyle" | "tooltip" | "tooltipClass" | "tooltipStyle" | "bgColor" | "arrow" | "placement" | "flip" | "trigger" | "keyboard" | "to" | "transitionDuration" | "showDelay" | "hideDelay" | "show" | "showControl")> & import('vue').ShallowUnwrapRef<{
            show: () => void;
            hide: () => void;
            observeScroll: () => void;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: {
                tooltip?(_: {}): any;
                default?(_: {}): any;
            };
        }) | null;
        palleteRef: HTMLDivElement;
        hueRailRef: HTMLDivElement;
        alphaRailRef: HTMLDivElement;
    };
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<Props, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    clear: (...args: any[]) => void;
    "update:value": (...args: any[]) => void;
    complete: (...args: any[]) => void;
    confirm: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<Props> & Readonly<{
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    onComplete?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
}>, {
    size: "small" | "middle" | "large";
    footer: string;
    label: (color: string) => string;
    actions: ColorPickerAction[];
    width: string | number;
    tooltipStyle: CSSProperties;
    disabled: boolean;
    value: string;
    inputProps: object;
    showAlpha: boolean;
    showPreview: boolean;
    modes: ColorPickerMode[];
    swatches: string[];
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    tooltipRef: ({
        $: import('vue').ComponentInternalInstance;
        $data: {};
        $props: {
            readonly maxWidth?: string | number | undefined;
            readonly content?: string | undefined;
            readonly contentClass?: string | undefined;
            readonly contentStyle?: CSSProperties | undefined;
            readonly tooltip?: string | undefined;
            readonly tooltipClass?: string | undefined;
            readonly tooltipStyle?: CSSProperties | undefined;
            readonly bgColor?: string | undefined;
            readonly arrow?: boolean | undefined;
            readonly placement?: "top" | "bottom" | "left" | "right" | undefined;
            readonly flip?: boolean | undefined;
            readonly trigger?: "hover" | "click" | undefined;
            readonly keyboard?: boolean | undefined;
            readonly to?: (string | HTMLElement | false) | undefined;
            readonly transitionDuration?: number | undefined;
            readonly showDelay?: number | undefined;
            readonly hideDelay?: number | undefined;
            readonly show?: boolean | undefined;
            readonly showControl?: boolean | undefined;
            readonly onAnimationend?: ((...args: any[]) => any) | undefined;
            readonly "onUpdate:show"?: ((...args: any[]) => any) | undefined;
            readonly onOpenChange?: ((...args: any[]) => any) | undefined;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        } & {
            tooltipRef: HTMLDivElement;
            tooltipCardRef: HTMLDivElement;
            tooltipContentRef: HTMLSpanElement;
        };
        $slots: Readonly<{
            [name: string]: import('vue').Slot<any> | undefined;
        }>;
        $root: import('vue').ComponentPublicInstance | null;
        $parent: import('vue').ComponentPublicInstance | null;
        $host: Element | null;
        $emit: ((event: "animationend", ...args: any[]) => void) & ((event: "update:show", ...args: any[]) => void) & ((event: "openChange", ...args: any[]) => void);
        $el: HTMLDivElement;
        $options: import('vue').ComponentOptionsBase<Readonly<import('../tooltip').Props> & Readonly<{
            onAnimationend?: ((...args: any[]) => any) | undefined;
            "onUpdate:show"?: ((...args: any[]) => any) | undefined;
            onOpenChange?: ((...args: any[]) => any) | undefined;
        }>, {
            show: () => void;
            hide: () => void;
            observeScroll: () => void;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            animationend: (...args: any[]) => void;
            "update:show": (...args: any[]) => void;
            openChange: (...args: any[]) => void;
        }, string, {
            maxWidth: string | number;
            content: string;
            contentClass: string;
            contentStyle: CSSProperties;
            tooltip: string;
            tooltipClass: string;
            tooltipStyle: CSSProperties;
            bgColor: string;
            arrow: boolean;
            placement: "top" | "bottom" | "left" | "right";
            flip: boolean;
            trigger: "hover" | "click";
            keyboard: boolean;
            to: string | HTMLElement | false;
            transitionDuration: number;
            showDelay: number;
            hideDelay: number;
            show: boolean;
            showControl: boolean;
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import('vue').nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
    } & Readonly<{
        maxWidth: string | number;
        content: string;
        contentClass: string;
        contentStyle: CSSProperties;
        tooltip: string;
        tooltipClass: string;
        tooltipStyle: CSSProperties;
        bgColor: string;
        arrow: boolean;
        placement: "top" | "bottom" | "left" | "right";
        flip: boolean;
        trigger: "hover" | "click";
        keyboard: boolean;
        to: string | HTMLElement | false;
        transitionDuration: number;
        showDelay: number;
        hideDelay: number;
        show: boolean;
        showControl: boolean;
    }> & Omit<Readonly<import('../tooltip').Props> & Readonly<{
        onAnimationend?: ((...args: any[]) => any) | undefined;
        "onUpdate:show"?: ((...args: any[]) => any) | undefined;
        onOpenChange?: ((...args: any[]) => any) | undefined;
    }>, "hide" | "observeScroll" | ("maxWidth" | "content" | "contentClass" | "contentStyle" | "tooltip" | "tooltipClass" | "tooltipStyle" | "bgColor" | "arrow" | "placement" | "flip" | "trigger" | "keyboard" | "to" | "transitionDuration" | "showDelay" | "hideDelay" | "show" | "showControl")> & import('vue').ShallowUnwrapRef<{
        show: () => void;
        hide: () => void;
        observeScroll: () => void;
    }> & {} & import('vue').ComponentCustomProperties & {} & {
        $slots: {
            tooltip?(_: {}): any;
            default?(_: {}): any;
        };
    }) | null;
    palleteRef: HTMLDivElement;
    hueRailRef: HTMLDivElement;
    alphaRailRef: HTMLDivElement;
}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
