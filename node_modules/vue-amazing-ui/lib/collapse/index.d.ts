export type { Props, Item } from './Collapse';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Collapse').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        "update:activeKey": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        bordered: boolean;
        contentStyle: import('vue').CSSProperties;
        arrow: import('vue').VNode | import('vue').Slot;
        disabled: boolean;
        ghost: boolean;
        showArrow: boolean;
        extra: string;
        headerStyle: import('vue').CSSProperties;
        collapseStyle: import('vue').CSSProperties;
        arrowPlacement: "left" | "right";
        arrowStyle: import('vue').CSSProperties;
        lang: string;
        copyable: boolean;
        copyProps: object;
        copyText: string;
        copiedText: string;
        items: import('./Collapse').Item[];
        activeKey: string[] | string | number[] | number | null;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        contentRef: HTMLDivElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Collapse').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        bordered: boolean;
        contentStyle: import('vue').CSSProperties;
        arrow: import('vue').VNode | import('vue').Slot;
        disabled: boolean;
        ghost: boolean;
        showArrow: boolean;
        extra: string;
        headerStyle: import('vue').CSSProperties;
        collapseStyle: import('vue').CSSProperties;
        arrowPlacement: "left" | "right";
        arrowStyle: import('vue').CSSProperties;
        lang: string;
        copyable: boolean;
        copyProps: object;
        copyText: string;
        copiedText: string;
        items: import('./Collapse').Item[];
        activeKey: string[] | string | number[] | number | null;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Collapse').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:activeKey": (...args: any[]) => void;
}, string, {
    bordered: boolean;
    contentStyle: import('vue').CSSProperties;
    arrow: import('vue').VNode | import('vue').Slot;
    disabled: boolean;
    ghost: boolean;
    showArrow: boolean;
    extra: string;
    headerStyle: import('vue').CSSProperties;
    collapseStyle: import('vue').CSSProperties;
    arrowPlacement: "left" | "right";
    arrowStyle: import('vue').CSSProperties;
    lang: string;
    copyable: boolean;
    copyProps: object;
    copyText: string;
    copiedText: string;
    items: import('./Collapse').Item[];
    activeKey: string[] | string | number[] | number | null;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        arrow?(_: {
            item: import('./Collapse').Item;
            key: string | number;
            active: boolean;
        }): any;
        header?(_: {
            item: import('./Collapse').Item;
            header: string | undefined;
            key: string | number;
            active: boolean;
        }): any;
        extra?(_: {
            item: import('./Collapse').Item;
            extra: string | number | boolean | object | string[] | number[] | import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
                [key: string]: any;
            }> | import('vue').Slot | import('vue').CSSProperties | import('./Collapse').Item[] | null | undefined;
            key: string | number;
            active: boolean;
        }): any;
        lang?(_: {
            item: import('./Collapse').Item;
            lang: string | number | boolean | object | string[] | number[] | import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
                [key: string]: any;
            }> | import('vue').Slot | import('vue').CSSProperties | import('./Collapse').Item[] | null | undefined;
            key: string | number;
            active: boolean;
        }): any;
        content?(_: {
            item: import('./Collapse').Item;
            content: string | undefined;
            key: string | number;
            active: boolean;
        }): any;
    };
}) & import('vue').Plugin;
export default _default;
