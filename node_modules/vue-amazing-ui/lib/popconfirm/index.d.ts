export type { Props } from './Popconfirm';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Popconfirm').Props> & Readonly<{
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        cancel: (...args: any[]) => void;
        ok: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        title: string;
        description: string;
        icon: "success" | "info" | "warning" | "danger" | import('vue').VNode | import('vue').Slot;
        tooltipStyle: import('vue').CSSProperties;
        keyboard: boolean;
        descriptionStyle: import('vue').CSSProperties;
        titleStyle: import('vue').CSSProperties;
        cancelText: string;
        cancelProps: object;
        okText: string;
        okType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
        okProps: object;
        iconStyle: import('vue').CSSProperties;
        cancelType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
        showCancel: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        tooltipRef: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly maxWidth?: string | number | undefined;
                readonly content?: string | undefined;
                readonly contentClass?: string | undefined;
                readonly contentStyle?: import('vue').CSSProperties | undefined;
                readonly tooltip?: string | undefined;
                readonly tooltipClass?: string | undefined;
                readonly tooltipStyle?: import('vue').CSSProperties | undefined;
                readonly bgColor?: string | undefined;
                readonly arrow?: boolean | undefined;
                readonly placement?: "top" | "bottom" | "left" | "right" | undefined;
                readonly flip?: boolean | undefined;
                readonly trigger?: "hover" | "click" | undefined;
                readonly keyboard?: boolean | undefined;
                readonly to?: (string | HTMLElement | false) | undefined;
                readonly transitionDuration?: number | undefined;
                readonly showDelay?: number | undefined;
                readonly hideDelay?: number | undefined;
                readonly show?: boolean | undefined;
                readonly showControl?: boolean | undefined;
                readonly onAnimationend?: ((...args: any[]) => any) | undefined;
                readonly "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                readonly onOpenChange?: ((...args: any[]) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                tooltipRef: HTMLDivElement;
                tooltipCardRef: HTMLDivElement;
                tooltipContentRef: HTMLSpanElement;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "animationend", ...args: any[]) => void) & ((event: "update:show", ...args: any[]) => void) & ((event: "openChange", ...args: any[]) => void);
            $el: HTMLDivElement;
            $options: import('vue').ComponentOptionsBase<Readonly<import('..').TooltipProps> & Readonly<{
                onAnimationend?: ((...args: any[]) => any) | undefined;
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                onOpenChange?: ((...args: any[]) => any) | undefined;
            }>, {
                show: () => void;
                hide: () => void;
                observeScroll: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                animationend: (...args: any[]) => void;
                "update:show": (...args: any[]) => void;
                openChange: (...args: any[]) => void;
            }, string, {
                maxWidth: string | number;
                content: string;
                contentClass: string;
                contentStyle: import('vue').CSSProperties;
                tooltip: string;
                tooltipClass: string;
                tooltipStyle: import('vue').CSSProperties;
                bgColor: string;
                arrow: boolean;
                placement: "top" | "bottom" | "left" | "right";
                flip: boolean;
                trigger: "hover" | "click";
                keyboard: boolean;
                to: string | HTMLElement | false;
                transitionDuration: number;
                showDelay: number;
                hideDelay: number;
                show: boolean;
                showControl: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            maxWidth: string | number;
            content: string;
            contentClass: string;
            contentStyle: import('vue').CSSProperties;
            tooltip: string;
            tooltipClass: string;
            tooltipStyle: import('vue').CSSProperties;
            bgColor: string;
            arrow: boolean;
            placement: "top" | "bottom" | "left" | "right";
            flip: boolean;
            trigger: "hover" | "click";
            keyboard: boolean;
            to: string | HTMLElement | false;
            transitionDuration: number;
            showDelay: number;
            hideDelay: number;
            show: boolean;
            showControl: boolean;
        }> & Omit<Readonly<import('..').TooltipProps> & Readonly<{
            onAnimationend?: ((...args: any[]) => any) | undefined;
            "onUpdate:show"?: ((...args: any[]) => any) | undefined;
            onOpenChange?: ((...args: any[]) => any) | undefined;
        }>, "hide" | "observeScroll" | ("maxWidth" | "content" | "contentClass" | "contentStyle" | "tooltip" | "tooltipClass" | "tooltipStyle" | "bgColor" | "arrow" | "placement" | "flip" | "trigger" | "keyboard" | "to" | "transitionDuration" | "showDelay" | "hideDelay" | "show" | "showControl")> & import('vue').ShallowUnwrapRef<{
            show: () => void;
            hide: () => void;
            observeScroll: () => void;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: {
                tooltip?(_: {}): any;
                default?(_: {}): any;
            };
        }) | null;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Popconfirm').Props> & Readonly<{
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        title: string;
        description: string;
        icon: "success" | "info" | "warning" | "danger" | import('vue').VNode | import('vue').Slot;
        tooltipStyle: import('vue').CSSProperties;
        keyboard: boolean;
        descriptionStyle: import('vue').CSSProperties;
        titleStyle: import('vue').CSSProperties;
        cancelText: string;
        cancelProps: object;
        okText: string;
        okType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
        okProps: object;
        iconStyle: import('vue').CSSProperties;
        cancelType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
        showCancel: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Popconfirm').Props> & Readonly<{
    onCancel?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    cancel: (...args: any[]) => void;
    ok: (...args: any[]) => void;
}, string, {
    title: string;
    description: string;
    icon: "success" | "info" | "warning" | "danger" | import('vue').VNode | import('vue').Slot;
    tooltipStyle: import('vue').CSSProperties;
    keyboard: boolean;
    descriptionStyle: import('vue').CSSProperties;
    titleStyle: import('vue').CSSProperties;
    cancelText: string;
    cancelProps: object;
    okText: string;
    okType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
    okProps: object;
    iconStyle: import('vue').CSSProperties;
    cancelType: "default" | "reverse" | "primary" | "danger" | "dashed" | "text" | "link";
    showCancel: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        icon?(_: {}): any;
        title?(_: {}): any;
        description?(_: {}): any;
        cancelText?(_: {}): any;
        okText?(_: {}): any;
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
