import { CSSProperties } from 'vue';
export type PresetColor = 'pink' | 'red' | 'yellow' | 'orange' | 'cyan' | 'green' | 'blue' | 'purple' | 'geekblue' | 'magenta' | 'volcano' | 'gold' | 'lime';
export type Status = 'success' | 'processing' | 'default' | 'error' | 'warning';
export interface Props {
    color?: PresetColor | string;
    value?: number | string;
    max?: number;
    showZero?: boolean;
    dot?: boolean;
    offset?: [number | string, number | string];
    status?: Status;
    text?: string;
    valueStyle?: CSSProperties;
    zIndex?: number;
    title?: string;
    ripple?: boolean;
}
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {}): any;
        default?(_: {}): any;
        value?(_: {}): any;
    };
    refs: {};
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<Props, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<Props> & Readonly<{}>, {
    title: string;
    text: string;
    color: PresetColor | string;
    zIndex: number;
    value: number | string;
    max: number;
    showZero: boolean;
    dot: boolean;
    offset: [number | string, number | string];
    status: Status;
    valueStyle: CSSProperties;
    ripple: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
