export type { Props } from './Scrollbar';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Scrollbar').Props> & Readonly<{
        onScroll?: ((...args: any[]) => any) | undefined;
        onScrollend?: ((...args: any[]) => any) | undefined;
    }>, {
        scrollTo: (...args: any[]) => void;
        scrollBy: (...args: any[]) => void;
        getScrollData: () => object;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        scroll: (...args: any[]) => void;
        scrollend: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        size: number;
        contentClass: string;
        contentStyle: import('vue').CSSProperties;
        trigger: "hover" | "none";
        autoHide: boolean;
        delay: number;
        xScrollable: boolean;
        yScrollable: boolean;
        xPlacement: "top" | "bottom";
        yPlacement: "left" | "right";
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        containerRef: HTMLDivElement;
        contentRef: HTMLDivElement;
        railVerticalRef: HTMLDivElement;
        railHorizontalRef: HTMLDivElement;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Scrollbar').Props> & Readonly<{
        onScroll?: ((...args: any[]) => any) | undefined;
        onScrollend?: ((...args: any[]) => any) | undefined;
    }>, {
        scrollTo: (...args: any[]) => void;
        scrollBy: (...args: any[]) => void;
        getScrollData: () => object;
    }, {}, {}, {}, {
        size: number;
        contentClass: string;
        contentStyle: import('vue').CSSProperties;
        trigger: "hover" | "none";
        autoHide: boolean;
        delay: number;
        xScrollable: boolean;
        yScrollable: boolean;
        xPlacement: "top" | "bottom";
        yPlacement: "left" | "right";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Scrollbar').Props> & Readonly<{
    onScroll?: ((...args: any[]) => any) | undefined;
    onScrollend?: ((...args: any[]) => any) | undefined;
}>, {
    scrollTo: (...args: any[]) => void;
    scrollBy: (...args: any[]) => void;
    getScrollData: () => object;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    scroll: (...args: any[]) => void;
    scrollend: (...args: any[]) => void;
}, string, {
    size: number;
    contentClass: string;
    contentStyle: import('vue').CSSProperties;
    trigger: "hover" | "none";
    autoHide: boolean;
    delay: number;
    xScrollable: boolean;
    yScrollable: boolean;
    xPlacement: "top" | "bottom";
    yPlacement: "left" | "right";
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
