export type { Props, Column, Selection, ScrollOption } from './Table';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Table').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        onExpand?: ((...args: any[]) => any) | undefined;
        onExpandedRowsChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:expandedRowKeys"?: ((...args: any[]) => any) | undefined;
        onSortChange?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        expand: (...args: any[]) => void;
        expandedRowsChange: (...args: any[]) => void;
        "update:expandedRowKeys": (...args: any[]) => void;
        sortChange: (...args: any[]) => void;
    }, import('vue').PublicProps, {
        scroll: import('./Table').ScrollOption;
        size: "large" | "middle" | "small";
        footer: string;
        header: string;
        bordered: boolean;
        sticky: boolean;
        loading: boolean;
        tableLayout: "auto" | "fixed";
        columns: import('./Table').Column[];
        scrollbarProps: object;
        spinProps: object;
        emptyProps: object;
        showPagination: boolean;
        pagination: object;
        ellipsisProps: object;
        showSorterTooltip: boolean;
        sortTooltipProps: object;
        sortDirections: ("ascend" | "descend")[];
        dataSource: object[];
        rowClassName: string | ((record: Record<string, any>, rowIndex: number) => string);
        striped: boolean;
        rowKey: string | ((record: Record<string, any>, index?: number) => string);
        rowSelection: import('./Table').Selection;
        showExpandColumn: boolean;
        expandColumnTitle: string;
        expandColumnWidth: string | number;
        expandCell: import('vue').Slot;
        expandedRowRender: import('vue').Slot;
        expandFixed: boolean;
        expandedRowKeys: string[];
        expandRowByClick: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        tableRef: HTMLDivElement;
        scrollbarRef: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly contentClass?: string | undefined;
                readonly contentStyle?: import('vue').CSSProperties | undefined;
                readonly size?: number | undefined;
                readonly trigger?: "hover" | "none" | undefined;
                readonly autoHide?: boolean | undefined;
                readonly delay?: number | undefined;
                readonly xScrollable?: boolean | undefined;
                readonly yScrollable?: boolean | undefined;
                readonly xPlacement?: "top" | "bottom" | undefined;
                readonly yPlacement?: "left" | "right" | undefined;
                readonly onScroll?: ((...args: any[]) => any) | undefined;
                readonly onScrollend?: ((...args: any[]) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                containerRef: HTMLDivElement;
                contentRef: HTMLDivElement;
                railVerticalRef: HTMLDivElement;
                railHorizontalRef: HTMLDivElement;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "scroll", ...args: any[]) => void) & ((event: "scrollend", ...args: any[]) => void);
            $el: HTMLDivElement;
            $options: import('vue').ComponentOptionsBase<Readonly<import('..').ScrollbarProps> & Readonly<{
                onScroll?: ((...args: any[]) => any) | undefined;
                onScrollend?: ((...args: any[]) => any) | undefined;
            }>, {
                scrollTo: (...args: any[]) => void;
                scrollBy: (...args: any[]) => void;
                getScrollData: () => object;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                scroll: (...args: any[]) => void;
                scrollend: (...args: any[]) => void;
            }, string, {
                size: number;
                contentClass: string;
                contentStyle: import('vue').CSSProperties;
                trigger: "hover" | "none";
                autoHide: boolean;
                delay: number;
                xScrollable: boolean;
                yScrollable: boolean;
                xPlacement: "top" | "bottom";
                yPlacement: "left" | "right";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            size: number;
            contentClass: string;
            contentStyle: import('vue').CSSProperties;
            trigger: "hover" | "none";
            autoHide: boolean;
            delay: number;
            xScrollable: boolean;
            yScrollable: boolean;
            xPlacement: "top" | "bottom";
            yPlacement: "left" | "right";
        }> & Omit<Readonly<import('..').ScrollbarProps> & Readonly<{
            onScroll?: ((...args: any[]) => any) | undefined;
            onScrollend?: ((...args: any[]) => any) | undefined;
        }>, "scrollTo" | "scrollBy" | "getScrollData" | ("size" | "contentClass" | "contentStyle" | "trigger" | "autoHide" | "delay" | "xScrollable" | "yScrollable" | "xPlacement" | "yPlacement")> & import('vue').ShallowUnwrapRef<{
            scrollTo: (...args: any[]) => void;
            scrollBy: (...args: any[]) => void;
            getScrollData: () => object;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: {
                default?(_: {}): any;
            };
        }) | null;
        colExpandRef: HTMLTableColElement;
        colSelectionRef: HTMLTableColElement;
        colRef: HTMLTableColElement[];
        tooltipRef: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly maxWidth?: string | number | undefined;
                readonly content?: string | undefined;
                readonly contentClass?: string | undefined;
                readonly contentStyle?: import('vue').CSSProperties | undefined;
                readonly tooltip?: string | undefined;
                readonly tooltipClass?: string | undefined;
                readonly tooltipStyle?: import('vue').CSSProperties | undefined;
                readonly bgColor?: string | undefined;
                readonly arrow?: boolean | undefined;
                readonly placement?: "top" | "bottom" | "left" | "right" | undefined;
                readonly flip?: boolean | undefined;
                readonly trigger?: "hover" | "click" | undefined;
                readonly keyboard?: boolean | undefined;
                readonly to?: (string | HTMLElement | false) | undefined;
                readonly transitionDuration?: number | undefined;
                readonly showDelay?: number | undefined;
                readonly hideDelay?: number | undefined;
                readonly show?: boolean | undefined;
                readonly showControl?: boolean | undefined;
                readonly onAnimationend?: ((...args: any[]) => any) | undefined;
                readonly "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                readonly onOpenChange?: ((...args: any[]) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                tooltipRef: HTMLDivElement;
                tooltipCardRef: HTMLDivElement;
                tooltipContentRef: HTMLSpanElement;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "animationend", ...args: any[]) => void) & ((event: "update:show", ...args: any[]) => void) & ((event: "openChange", ...args: any[]) => void);
            $el: HTMLDivElement;
            $options: import('vue').ComponentOptionsBase<Readonly<import('..').TooltipProps> & Readonly<{
                onAnimationend?: ((...args: any[]) => any) | undefined;
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                onOpenChange?: ((...args: any[]) => any) | undefined;
            }>, {
                show: () => void;
                hide: () => void;
                observeScroll: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                animationend: (...args: any[]) => void;
                "update:show": (...args: any[]) => void;
                openChange: (...args: any[]) => void;
            }, string, {
                maxWidth: string | number;
                content: string;
                contentClass: string;
                contentStyle: import('vue').CSSProperties;
                tooltip: string;
                tooltipClass: string;
                tooltipStyle: import('vue').CSSProperties;
                bgColor: string;
                arrow: boolean;
                placement: "top" | "bottom" | "left" | "right";
                flip: boolean;
                trigger: "hover" | "click";
                keyboard: boolean;
                to: string | HTMLElement | false;
                transitionDuration: number;
                showDelay: number;
                hideDelay: number;
                show: boolean;
                showControl: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            maxWidth: string | number;
            content: string;
            contentClass: string;
            contentStyle: import('vue').CSSProperties;
            tooltip: string;
            tooltipClass: string;
            tooltipStyle: import('vue').CSSProperties;
            bgColor: string;
            arrow: boolean;
            placement: "top" | "bottom" | "left" | "right";
            flip: boolean;
            trigger: "hover" | "click";
            keyboard: boolean;
            to: string | HTMLElement | false;
            transitionDuration: number;
            showDelay: number;
            hideDelay: number;
            show: boolean;
            showControl: boolean;
        }> & Omit<Readonly<import('..').TooltipProps> & Readonly<{
            onAnimationend?: ((...args: any[]) => any) | undefined;
            "onUpdate:show"?: ((...args: any[]) => any) | undefined;
            onOpenChange?: ((...args: any[]) => any) | undefined;
        }>, "hide" | "observeScroll" | ("maxWidth" | "content" | "contentClass" | "contentStyle" | "tooltip" | "tooltipClass" | "tooltipStyle" | "bgColor" | "arrow" | "placement" | "flip" | "trigger" | "keyboard" | "to" | "transitionDuration" | "showDelay" | "hideDelay" | "show" | "showControl")> & import('vue').ShallowUnwrapRef<{
            show: () => void;
            hide: () => void;
            observeScroll: () => void;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: {
                tooltip?(_: {}): any;
                default?(_: {}): any;
            };
        }) | null;
        ellipsisRef: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly maxWidth?: string | number | undefined;
                readonly tooltipMaxWidth?: string | number | undefined;
                readonly line?: number | undefined;
                readonly expand?: boolean | undefined;
                readonly tooltip?: boolean | undefined;
                readonly onExpandChange?: ((...args: any[]) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                tooltipRef: ({
                    $: import('vue').ComponentInternalInstance;
                    $data: {};
                    $props: {
                        readonly maxWidth?: string | number | undefined;
                        readonly content?: string | undefined;
                        readonly contentClass?: string | undefined;
                        readonly contentStyle?: import('vue').CSSProperties | undefined;
                        readonly tooltip?: string | undefined;
                        readonly tooltipClass?: string | undefined;
                        readonly tooltipStyle?: import('vue').CSSProperties | undefined;
                        readonly bgColor?: string | undefined;
                        readonly arrow?: boolean | undefined;
                        readonly placement?: "top" | "bottom" | "left" | "right" | undefined;
                        readonly flip?: boolean | undefined;
                        readonly trigger?: "hover" | "click" | undefined;
                        readonly keyboard?: boolean | undefined;
                        readonly to?: (string | HTMLElement | false) | undefined;
                        readonly transitionDuration?: number | undefined;
                        readonly showDelay?: number | undefined;
                        readonly hideDelay?: number | undefined;
                        readonly show?: boolean | undefined;
                        readonly showControl?: boolean | undefined;
                        readonly onAnimationend?: ((...args: any[]) => any) | undefined;
                        readonly "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                        readonly onOpenChange?: ((...args: any[]) => any) | undefined;
                    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
                    $attrs: {
                        [x: string]: unknown;
                    };
                    $refs: {
                        [x: string]: unknown;
                    } & {
                        tooltipRef: HTMLDivElement;
                        tooltipCardRef: HTMLDivElement;
                        tooltipContentRef: HTMLSpanElement;
                    };
                    $slots: Readonly<{
                        [name: string]: import('vue').Slot<any> | undefined;
                    }>;
                    $root: import('vue').ComponentPublicInstance | null;
                    $parent: import('vue').ComponentPublicInstance | null;
                    $host: Element | null;
                    $emit: ((event: "animationend", ...args: any[]) => void) & ((event: "update:show", ...args: any[]) => void) & ((event: "openChange", ...args: any[]) => void);
                    $el: HTMLDivElement;
                    $options: import('vue').ComponentOptionsBase<Readonly<import('..').TooltipProps> & Readonly<{
                        onAnimationend?: ((...args: any[]) => any) | undefined;
                        "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                        onOpenChange?: ((...args: any[]) => any) | undefined;
                    }>, {
                        show: () => void;
                        hide: () => void;
                        observeScroll: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                        animationend: (...args: any[]) => void;
                        "update:show": (...args: any[]) => void;
                        openChange: (...args: any[]) => void;
                    }, string, {
                        maxWidth: string | number;
                        content: string;
                        contentClass: string;
                        contentStyle: import('vue').CSSProperties;
                        tooltip: string;
                        tooltipClass: string;
                        tooltipStyle: import('vue').CSSProperties;
                        bgColor: string;
                        arrow: boolean;
                        placement: "top" | "bottom" | "left" | "right";
                        flip: boolean;
                        trigger: "hover" | "click";
                        keyboard: boolean;
                        to: string | HTMLElement | false;
                        transitionDuration: number;
                        showDelay: number;
                        hideDelay: number;
                        show: boolean;
                        showControl: boolean;
                    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                        beforeCreate?: (() => void) | (() => void)[];
                        created?: (() => void) | (() => void)[];
                        beforeMount?: (() => void) | (() => void)[];
                        mounted?: (() => void) | (() => void)[];
                        beforeUpdate?: (() => void) | (() => void)[];
                        updated?: (() => void) | (() => void)[];
                        activated?: (() => void) | (() => void)[];
                        deactivated?: (() => void) | (() => void)[];
                        beforeDestroy?: (() => void) | (() => void)[];
                        beforeUnmount?: (() => void) | (() => void)[];
                        destroyed?: (() => void) | (() => void)[];
                        unmounted?: (() => void) | (() => void)[];
                        renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                        renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                        errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
                    };
                    $forceUpdate: () => void;
                    $nextTick: typeof import('vue').nextTick;
                    $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
                } & Readonly<{
                    maxWidth: string | number;
                    content: string;
                    contentClass: string;
                    contentStyle: import('vue').CSSProperties;
                    tooltip: string;
                    tooltipClass: string;
                    tooltipStyle: import('vue').CSSProperties;
                    bgColor: string;
                    arrow: boolean;
                    placement: "top" | "bottom" | "left" | "right";
                    flip: boolean;
                    trigger: "hover" | "click";
                    keyboard: boolean;
                    to: string | HTMLElement | false;
                    transitionDuration: number;
                    showDelay: number;
                    hideDelay: number;
                    show: boolean;
                    showControl: boolean;
                }> & Omit<Readonly<import('..').TooltipProps> & Readonly<{
                    onAnimationend?: ((...args: any[]) => any) | undefined;
                    "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                    onOpenChange?: ((...args: any[]) => any) | undefined;
                }>, "hide" | "observeScroll" | ("maxWidth" | "content" | "contentClass" | "contentStyle" | "tooltip" | "tooltipClass" | "tooltipStyle" | "bgColor" | "arrow" | "placement" | "flip" | "trigger" | "keyboard" | "to" | "transitionDuration" | "showDelay" | "hideDelay" | "show" | "showControl")> & import('vue').ShallowUnwrapRef<{
                    show: () => void;
                    hide: () => void;
                    observeScroll: () => void;
                }> & {} & import('vue').ComponentCustomProperties & {} & {
                    $slots: {
                        tooltip?(_: {}): any;
                        default?(_: {}): any;
                    };
                }) | null;
                ellipsisRef: HTMLDivElement;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: (event: "expandChange", ...args: any[]) => void;
            $el: HTMLDivElement;
            $options: import('vue').ComponentOptionsBase<Readonly<import('..').EllipsisProps> & Readonly<{
                onExpandChange?: ((...args: any[]) => any) | undefined;
            }>, {
                observeScroll: import('vue').Ref<any, any>;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                expandChange: (...args: any[]) => void;
            }, string, {
                line: number;
                maxWidth: string | number;
                tooltip: boolean;
                tooltipMaxWidth: string | number;
                expand: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            line: number;
            maxWidth: string | number;
            tooltip: boolean;
            tooltipMaxWidth: string | number;
            expand: boolean;
        }> & Omit<Readonly<import('..').EllipsisProps> & Readonly<{
            onExpandChange?: ((...args: any[]) => any) | undefined;
        }>, "observeScroll" | ("line" | "maxWidth" | "tooltip" | "tooltipMaxWidth" | "expand")> & import('vue').ShallowUnwrapRef<{
            observeScroll: import('vue').Ref<any, any>;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: {
                tooltip?(_: {}): any;
                default?(_: {}): any;
                default?(_: {}): any;
            };
        }) | null;
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Table').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        onExpand?: ((...args: any[]) => any) | undefined;
        onExpandedRowsChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:expandedRowKeys"?: ((...args: any[]) => any) | undefined;
        onSortChange?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        scroll: import('./Table').ScrollOption;
        size: "large" | "middle" | "small";
        footer: string;
        header: string;
        bordered: boolean;
        sticky: boolean;
        loading: boolean;
        tableLayout: "auto" | "fixed";
        columns: import('./Table').Column[];
        scrollbarProps: object;
        spinProps: object;
        emptyProps: object;
        showPagination: boolean;
        pagination: object;
        ellipsisProps: object;
        showSorterTooltip: boolean;
        sortTooltipProps: object;
        sortDirections: ("ascend" | "descend")[];
        dataSource: object[];
        rowClassName: string | ((record: Record<string, any>, rowIndex: number) => string);
        striped: boolean;
        rowKey: string | ((record: Record<string, any>, index?: number) => string);
        rowSelection: import('./Table').Selection;
        showExpandColumn: boolean;
        expandColumnTitle: string;
        expandColumnWidth: string | number;
        expandCell: import('vue').Slot;
        expandedRowRender: import('vue').Slot;
        expandFixed: boolean;
        expandedRowKeys: string[];
        expandRowByClick: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Table').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    onExpand?: ((...args: any[]) => any) | undefined;
    onExpandedRowsChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandedRowKeys"?: ((...args: any[]) => any) | undefined;
    onSortChange?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    expand: (...args: any[]) => void;
    expandedRowsChange: (...args: any[]) => void;
    "update:expandedRowKeys": (...args: any[]) => void;
    sortChange: (...args: any[]) => void;
}, string, {
    scroll: import('./Table').ScrollOption;
    size: "large" | "middle" | "small";
    footer: string;
    header: string;
    bordered: boolean;
    sticky: boolean;
    loading: boolean;
    tableLayout: "auto" | "fixed";
    columns: import('./Table').Column[];
    scrollbarProps: object;
    spinProps: object;
    emptyProps: object;
    showPagination: boolean;
    pagination: object;
    ellipsisProps: object;
    showSorterTooltip: boolean;
    sortTooltipProps: object;
    sortDirections: ("ascend" | "descend")[];
    dataSource: object[];
    rowClassName: string | ((record: Record<string, any>, rowIndex: number) => string);
    striped: boolean;
    rowKey: string | ((record: Record<string, any>, index?: number) => string);
    rowSelection: import('./Table').Selection;
    showExpandColumn: boolean;
    expandColumnTitle: string;
    expandColumnWidth: string | number;
    expandCell: import('vue').Slot;
    expandedRowRender: import('vue').Slot;
    expandFixed: boolean;
    expandedRowKeys: string[];
    expandRowByClick: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        header?(_: {}): any;
        expandColumnTitle?(_: {}): any;
        expandColumnTitle?(_: {}): any;
        headerCell?(_: {
            column: import('./Table').Column;
            title: string | undefined;
        }): any;
        headerCell?(_: {
            column: import('./Table').Column;
            title: string | undefined;
        }): any;
        headerCell?(_: {
            column: import('./Table').Column;
            title: string | undefined;
        }): any;
        headerCell?(_: {
            column: import('./Table').Column;
            title: string | undefined;
        }): any;
        headerCell?(_: {
            column: import('./Table').Column;
            title: string | undefined;
        }): any;
        headerCell?(_: {
            column: import('./Table').Column;
            title: string | undefined;
        }): any;
        headerCell?(_: {
            column: import('./Table').Column;
            title: string | undefined;
        }): any;
        headerCell?(_: {
            column: import('./Table').Column;
            title: string | undefined;
        }): any;
        expandCell?(_: {
            record: Record<string, any>;
            index: number;
            expanded: boolean;
        }): any;
        expandCell?(_: {
            record: Record<string, any>;
            index: number;
            expanded: boolean;
        }): any;
        bodyCell?(_: {
            column: {
                [x: string]: any;
                title?: string | undefined;
                align?: "left" | "center" | "right" | undefined;
                width?: string | number | undefined;
                className?: string | undefined;
                colSpan?: number | undefined;
                dataIndex?: string | undefined;
                key?: string | undefined;
                ellipsis?: boolean | undefined;
                ellipsisProps?: object | undefined;
                fixed?: "left" | "right" | undefined;
                slot?: string | undefined;
                children?: any[] | undefined;
                showSorterTooltip?: boolean | undefined;
                sortTooltipProps?: object | undefined;
                defaultSortOrder?: "ascend" | "descend" | undefined;
                sortDirections?: ("ascend" | "descend")[] | undefined;
                sorter?: Function | undefined;
                customCell?: ((record: Record<string, any>, rowIndex: number, column: import('./Table').Column) => object | undefined) | undefined;
            };
            record: Record<string, any>;
            text: any;
            index: number;
        }): any;
        bodyCell?(_: {
            column: {
                [x: string]: any;
                title?: string | undefined;
                align?: "left" | "center" | "right" | undefined;
                width?: string | number | undefined;
                className?: string | undefined;
                colSpan?: number | undefined;
                dataIndex?: string | undefined;
                key?: string | undefined;
                ellipsis?: boolean | undefined;
                ellipsisProps?: object | undefined;
                fixed?: "left" | "right" | undefined;
                slot?: string | undefined;
                children?: any[] | undefined;
                showSorterTooltip?: boolean | undefined;
                sortTooltipProps?: object | undefined;
                defaultSortOrder?: "ascend" | "descend" | undefined;
                sortDirections?: ("ascend" | "descend")[] | undefined;
                sorter?: Function | undefined;
                customCell?: ((record: Record<string, any>, rowIndex: number, column: import('./Table').Column) => object | undefined) | undefined;
            };
            record: Record<string, any>;
            text: any;
            index: number;
        }): any;
        bodyCell?(_: {
            column: {
                [x: string]: any;
                title?: string | undefined;
                align?: "left" | "center" | "right" | undefined;
                width?: string | number | undefined;
                className?: string | undefined;
                colSpan?: number | undefined;
                dataIndex?: string | undefined;
                key?: string | undefined;
                ellipsis?: boolean | undefined;
                ellipsisProps?: object | undefined;
                fixed?: "left" | "right" | undefined;
                slot?: string | undefined;
                children?: any[] | undefined;
                showSorterTooltip?: boolean | undefined;
                sortTooltipProps?: object | undefined;
                defaultSortOrder?: "ascend" | "descend" | undefined;
                sortDirections?: ("ascend" | "descend")[] | undefined;
                sorter?: Function | undefined;
                customCell?: ((record: Record<string, any>, rowIndex: number, column: import('./Table').Column) => object | undefined) | undefined;
            };
            record: Record<string, any>;
            text: any;
            index: number;
        }): any;
        bodyCell?(_: {
            column: {
                [x: string]: any;
                title?: string | undefined;
                align?: "left" | "center" | "right" | undefined;
                width?: string | number | undefined;
                className?: string | undefined;
                colSpan?: number | undefined;
                dataIndex?: string | undefined;
                key?: string | undefined;
                ellipsis?: boolean | undefined;
                ellipsisProps?: object | undefined;
                fixed?: "left" | "right" | undefined;
                slot?: string | undefined;
                children?: any[] | undefined;
                showSorterTooltip?: boolean | undefined;
                sortTooltipProps?: object | undefined;
                defaultSortOrder?: "ascend" | "descend" | undefined;
                sortDirections?: ("ascend" | "descend")[] | undefined;
                sorter?: Function | undefined;
                customCell?: ((record: Record<string, any>, rowIndex: number, column: import('./Table').Column) => object | undefined) | undefined;
            };
            record: Record<string, any>;
            text: any;
            index: number;
        }): any;
        expandedRowRender?(_: {
            record: Record<string, any>;
            index: number;
            expanded: boolean;
        }): any;
        expandedRowRender?(_: {
            record: Record<string, any>;
            index: number;
            expanded: boolean;
        }): any;
        expandedRowRender?(_: {
            record: Record<string, any>;
            index: number;
            expanded: boolean;
        }): any;
        expandedRowRender?(_: {
            record: Record<string, any>;
            index: number;
            expanded: boolean;
        }): any;
        footer?(_: {}): any;
    };
}) & import('vue').Plugin;
export default _default;
