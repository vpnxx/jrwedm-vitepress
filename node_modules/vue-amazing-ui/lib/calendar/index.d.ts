export type { Props, DayOfWeek, DefaultWeek, DateItem, MonthItem } from './Calendar';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        value?: string | number;
    } & import('./Calendar').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        onSelect?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((value: string | number) => any) | undefined;
        onPanelChange?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        select: (...args: any[]) => void;
        panelChange: (...args: any[]) => void;
        "update:value": (value: string | number) => void;
    }, import('vue').PublicProps, {
        header: string;
        mode: "month" | "year";
        display: "panel" | "card";
        yearSelectProps: object;
        monthSelectProps: object;
        modeRadioProps: object;
        startDayOfWeek: import('./Calendar').DayOfWeek;
        dateStrip: boolean;
        dateFormat: (date: number, timestamp: number) => string;
        weekFormat: (defaultWeek: import('./Calendar').DefaultWeek, week: number, timestamp: number) => string;
        monthFormat: (month: number, timestamp: number) => string;
        disabledDate: (timestamp: number) => boolean;
        valueFormat: string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        value?: string | number;
    } & import('./Calendar').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        onSelect?: ((...args: any[]) => any) | undefined;
        "onUpdate:value"?: ((value: string | number) => any) | undefined;
        onPanelChange?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        header: string;
        mode: "month" | "year";
        display: "panel" | "card";
        yearSelectProps: object;
        monthSelectProps: object;
        modeRadioProps: object;
        startDayOfWeek: import('./Calendar').DayOfWeek;
        dateStrip: boolean;
        dateFormat: (date: number, timestamp: number) => string;
        weekFormat: (defaultWeek: import('./Calendar').DefaultWeek, week: number, timestamp: number) => string;
        monthFormat: (month: number, timestamp: number) => string;
        disabledDate: (timestamp: number) => boolean;
        valueFormat: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    value?: string | number;
} & import('./Calendar').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((value: string | number) => any) | undefined;
    onPanelChange?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    select: (...args: any[]) => void;
    panelChange: (...args: any[]) => void;
    "update:value": (value: string | number) => void;
}, string, {
    header: string;
    mode: "month" | "year";
    display: "panel" | "card";
    yearSelectProps: object;
    monthSelectProps: object;
    modeRadioProps: object;
    startDayOfWeek: import('./Calendar').DayOfWeek;
    dateStrip: boolean;
    dateFormat: (date: number, timestamp: number) => string;
    weekFormat: (defaultWeek: import('./Calendar').DefaultWeek, week: number, timestamp: number) => string;
    monthFormat: (month: number, timestamp: number) => string;
    disabledDate: (timestamp: number) => boolean;
    valueFormat: string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        header?(_: {}): any;
        week?(_: {
            defaultWeek: import('./Calendar').DefaultWeek;
            week: number;
            timestamp: number;
        }): any;
        dateValue?(_: {
            type: "date";
            dateObject: {
                date: number;
                month: number;
                year: number;
            };
            timestamp: number;
            inCurrentMonth: boolean;
            isCurrentDate: boolean;
        }): any;
        dateContent?(_: {
            type: "date";
            dateObject: {
                date: number;
                month: number;
                year: number;
            };
            timestamp: number;
            inCurrentMonth: boolean;
            isCurrentDate: boolean;
        }): any;
        monthValue?(_: {
            type: "month";
            monthObject: {
                month: number;
                year: number;
            };
            timestamp: number;
            isCurrent: boolean;
        }): any;
        monthContent?(_: {
            type: "month";
            monthObject: {
                month: number;
                year: number;
            };
            timestamp: number;
            isCurrent: boolean;
        }): any;
    };
}) & import('vue').Plugin;
export default _default;
