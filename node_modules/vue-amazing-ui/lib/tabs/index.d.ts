export type { Props, Item } from './Tabs';
declare const _default: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('./Tabs').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        "update:activeKey": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        size: "small" | "middle" | "large";
        type: "line" | "card";
        contentStyle: import('vue').CSSProperties;
        animated: boolean;
        items: import('./Tabs').Item[];
        activeKey: string | number;
        prefix: string;
        suffix: string;
        centered: boolean;
        tabGutter: number;
        tabStyle: import('vue').CSSProperties;
        tabPosition: "top" | "right" | "bottom" | "left";
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
        wrapRef: HTMLDivElement;
        navRef: HTMLDivElement;
        tabsRef: HTMLDivElement[];
    }, HTMLDivElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('./Tabs').Props> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        size: "small" | "middle" | "large";
        type: "line" | "card";
        contentStyle: import('vue').CSSProperties;
        animated: boolean;
        items: import('./Tabs').Item[];
        activeKey: string | number;
        prefix: string;
        suffix: string;
        centered: boolean;
        tabGutter: number;
        tabStyle: import('vue').CSSProperties;
        tabPosition: "top" | "right" | "bottom" | "left";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('./Tabs').Props> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:activeKey": (...args: any[]) => void;
}, string, {
    size: "small" | "middle" | "large";
    type: "line" | "card";
    contentStyle: import('vue').CSSProperties;
    animated: boolean;
    items: import('./Tabs').Item[];
    activeKey: string | number;
    prefix: string;
    suffix: string;
    centered: boolean;
    tabGutter: number;
    tabStyle: import('vue').CSSProperties;
    tabPosition: "top" | "right" | "bottom" | "left";
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        prefix?(_: {}): any;
        tab?(_: {
            item: import('./Tabs').Item;
            tab: string | undefined;
            key: string | number;
        }): any;
        suffix?(_: {}): any;
        content?(_: {
            item: import('./Tabs').Item;
            content: string | undefined;
            key: string | number;
        }): any;
    };
}) & import('vue').Plugin;
export default _default;
